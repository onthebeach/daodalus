{"name":"Daodalus","tagline":"DSL for building MongoDB queries, updates and aggregations","body":"# DAODALUS  [![Build Status](https://travis-ci.org/onthebeach/daodalus.png)](http://travis-ci.org/onthebeach/daodalus) [![Code Climate](https://codeclimate.com/github/onthebeach/daodalus.png)](https://codeclimate.com/github/onthebeach/daodalus)\r\n\r\n### Take the sting out of constructing complex MongoDB queries, updates and aggregations.\r\n\r\nIn Greek mythology, Daedalus tried to prevent Icarus from flying too close to the sun, but Icarus ignored his father's warning, the wax holding together his wings melted, and he fell to his death. 'Daodalus' hopes to succeed where Daedalus failed by preventing your application code from flying too close to the code that interacts with your datastore.\r\n\r\nOriginally conceived of as an implementation of the Data Access Object pattern, it has evolved since then into more of a DSL to simplify doing complicated things with Mongo. However, by separating your models from the object used to interact with their stored form, we hope Daodalus still encourages your application and data layers to keep their distance from each other.\r\n\r\n## Registering connections\r\n\r\nBefore being able to use Daodalus you will need to create and register one or more connections to your instance (or instances) of MongoDB. Here's how you do it:\r\n\r\n    conn = Mongo::MongoClient.new('localhost', 27017, pool_size: 5)\r\n    Daodalus::Connection.register(conn, :name)\r\n\r\nIf you leave off the name, the connection will be registered as `:default`.\r\n\r\nThe connection can be any MongoDB connection class provided by the Ruby Mongo Driver - so you could also use a `MongoShardedClient` or `MongoReplicaSetClient` here.\r\n\r\n## Creating a DAO\r\n\r\nCreate a DAO by specifying a database and collection (and optional connection name, defaulting to 'default'):\r\n\r\n    dao = Daodalus::DAO.new(:my_db, :my_collection, :my_connection)\r\n\r\nThe `connection` name must match one of the connections you registered earlier.\r\n\r\n## Access to MongoDB Collection Methods\r\n\r\nYou now have access to several basic MongoDB methods as defined on the `Mongo::Collection` class of the MongoDB Ruby driver. The following methods work unchanged:\r\n\r\n* `find`\r\n* `update`\r\n* `insert`\r\n* `save`\r\n* `remove`\r\n* `count`\r\n* `aggregate`\r\n\r\nHowever, `find_one` and `find_and_modify` work slightly differently. While the original methods return either the matched document or `nil`, Daodalus is allergic to `nil`s, and so avoids them by using optional types instead. So the values returned will be either `Some[value]` or `None`. You can read more about optional types and see the implementation used by Daodalus [here](http://github.com/rsslldnphy/optional).\r\n\r\nThese are the only methods exposed by the Daodalus DAO - but should you need to call any other methods on the collection, the `Mongo::Collection` object can be accessed directly by calling `dao.coll`.\r\n\r\n## Queries\r\n\r\nQueries are built up by chaining together one or more 'where' clauses, like this:\r\n\r\n    dao.where(:name).eq('Terry').and(:paws).gte(3).find\r\n\r\nNote that a longer-form version of the clause name usually exists as an alias if you prefer to be a bit more verbose. So the above could equally be expressed as:\r\n\r\n    dao.where(:name).equals('Terry').and(:paws).greater_than_or_equal(3).find\r\n\r\nNotice the `find` at the end of the chain? This is what terminates the chain and sends your query to Mongo. You can also use `find_one` here (which, remember, will return an `Option`) as well as some other methods for updating and aggregation that we'll come to later.\r\n\r\nHere is the complete list of currently implemented 'where' clauses you can use with Daodalus.\r\n\r\n| Clause     | Alias          | Usage                        | As Mongo                      |\r\n| ---------- | -------------- | ---------------------------- | ----------------------------- |\r\n| `eq`       | `equals`       | `dao.where(:paws).eq(4)`     | `{ 'paws' : 4 }`              |\r\n| `ne`       | `not_equal`    | `dao.where(:paws).ne(4)`     | `{ 'paws' : { '$ne' : 4 } }`  |\r\n\r\n*\r\n*\r\n*\r\n*\r\n*\r\n*\r\n\r\n### Old README below this line\r\n\r\n### Configuration:\r\n\r\n    # config/mongo.yml\r\n    development:\r\n      animals:\r\n        database: animals_development\r\n        host: localhost\r\n        pool_size: 5\r\n        timeout: 5\r\n        replicate_set_name: animals_development\r\n        servers:\r\n          - { host: localhost, port: 27017 }\r\n\r\n### Initialisation:\r\n\r\n    # config/initializers/daodalus.rb\r\n    Daodalus::Configuration.load('config/mongo.yml', Rails.env)\r\n\r\n##### Examples:\r\n\r\n    #!ruby\r\n    class CatDAO\r\n      extend Daodalus::DAO # or `include` if you want an instance of a DAO\r\n      target :animals, :cats # or overide `connection` to supply your own\r\n\r\n      def self.example_find\r\n        select(:name).where(:paws).less_than(4).find\r\n      end\r\n\r\n      def self.example_find_one\r\n        where(:collar_id).eq(\"aochc986\").find_one\r\n      end\r\n\r\n      def self.example_update\r\n        set(:stray, true).where(:address).does_not_exist.update\r\n      end\r\n\r\n      def self.example_find_and_modify\r\n        dec(:lives).\r\n          push(:names, \"Kitty\").\r\n          where(:stray).eq(true).\r\n          and(:cuteness).gt(8).\r\n          find_and_modify(new: true)\r\n      end\r\n\r\n      def self.example_remove\r\n        where(:lives).eq(0).remove\r\n      end\r\n\r\n      def self.example_aggregation\r\n        match(:lives).gt(3).\r\n          and(:address).exists.\r\n          unwind(:favourite_foods).\r\n          group(:favourite_foods).\r\n          min(min_paws: 'paws').\r\n          sort(:_id).\r\n          limit(10).\r\n          project(:_id).as(:food).and(:min_paws).\r\n          aggregate\r\n      end\r\n    end\r\n\r\n## License\r\n\r\nDaodalus is Copyright Â© 2012-2013 On The Beach Ltd.\r\nIt is free software, and may be redistributed under the terms specified in the LICENSE file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}