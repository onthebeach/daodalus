{"name":"Daodalus","tagline":"DSL for building MongoDB queries, updates and aggregations","body":"# DAODALUS  [![Build Status](https://travis-ci.org/onthebeach/daodalus.png)](http://travis-ci.org/onthebeach/daodalus) [![Code Climate](https://codeclimate.com/github/onthebeach/daodalus.png)](https://codeclimate.com/github/onthebeach/daodalus)\r\n\r\n### Take the sting out of constructing complex MongoDB queries, updates and aggregations.\r\n\r\nIn Greek mythology, Daedalus tried to prevent Icarus from flying too close to the sun, but Icarus ignored his father's warning, the wax holding together his wings melted, and he fell to his death. 'Daodalus' hopes to succeed where Daedalus failed by preventing your application code from flying too close to the code that interacts with your datastore.\r\n\r\nOriginally conceived of as an implementation of the Data Access Object pattern, it has evolved since then into more of a DSL to simplify doing complicated things with Mongo. However, by separating your models from the object used to interact with their stored form, we hope Daodalus still encourages your application and data layers to keep their distance from each other.\r\n\r\n## Registering connections\r\n\r\nBefore being able to use Daodalus you will need to create and register one or more connections to your instance (or instances) of MongoDB. Here's how you do it:\r\n\r\n    conn = Mongo::MongoClient.new('localhost', 27017, pool_size: 5)\r\n    Daodalus::Connection.register(conn, :name)\r\n\r\nIf you leave off the name, the connection will be registered as `:default`.\r\n\r\nThe connection can be any MongoDB connection class provided by the Ruby Mongo Driver - so you could also use a `MongoShardedClient` or `MongoReplicaSetClient` here.\r\n\r\n## Creating a DAO\r\n\r\nCreate a DAO by specifying a database and collection (and optional connection name, defaulting to 'default'):\r\n\r\n    dao = Daodalus::DAO.new(:my_db, :my_collection, :my_connection)\r\n\r\nThe `connection` name must match one of the connections you registered earlier.\r\n\r\n## Access to MongoDB Collection Methods\r\n\r\nYou now have access to several basic MongoDB methods as defined on the `Mongo::Collection` class of the MongoDB Ruby driver. The following methods work unchanged:\r\n\r\n* `#find`\r\n* `#update`\r\n* `#insert`\r\n* `#save`\r\n* `#remove`\r\n* `#count`\r\n* `#aggregate`\r\n\r\nHowever, `#find_one` and `#find_and_modify` work slightly differently. While the original methods return either the matched document or `nil`, Daodalus is allergic to `nil`s, and so avoids them by using optional types instead. So the values returned will be either `Some[value]` or `None`. You can read more about optional types and see the implementation used by Daodalus [here](http://github.com/rsslldnphy/optional).\r\n\r\nThese are the only methods exposed by the Daodalus DAO - but should you need to call any other methods on the collection, the `Mongo::Collection` object can be accessed directly by calling `dao.coll`.\r\n\r\n## Queries\r\n\r\nQueries are built up by chaining together one or more 'where' clauses, like this:\r\n\r\n    dao.where(:name).eq('Terry').and(:paws).gte(3).find\r\n\r\nNote that a longer-form version of the clause name usually exists as an alias if you prefer to be a bit more verbose. So the above could equally be expressed as:\r\n\r\n    dao.where(:name).equals('Terry').and(:paws).greater_than_or_equal(3).find\r\n\r\nNotice the `find` at the end of the chain? This is what terminates the chain and sends your query to Mongo. You can also use `find_one` here (which, remember, will return an `Option`) as well as some other methods for updating and aggregation that we'll come to later.\r\n\r\nIf you need to make multiple assertions about the same field, you can simply chain them like this:\r\n\r\n    dao.where(:paws).gt(2).lt(5).find\r\n\r\nBut bear in mind that it's not possible to make an equality assertion *and* another assertion on the same field. (Which makes sense if you think about it.) This will raise an `InvalidQueryError`.\r\n\r\nQuerying against nested fields works just like it does in plain Mongo, using the dot operator. (You can pass field names as strings or symbols, it's up to you.)\r\n\r\n    dao.where(:'paws.2.toes').gt(3) # the third element of the paws array has a toes field that is > than 3\r\n\r\nHere is the complete list of currently implemented 'where' clauses you can use with Daodalus.\r\n\r\n| Clause     | Alias                      | Usage                         |\r\n| ---------- | -------------------------- | ----------------------------- |\r\n| `#eq`       | `#equals`                   | `dao.where(:paws).eq(4)`      |\r\n| `#ne`       | `#not_equal`                | `dao.where(:paws).ne(4)`      |\r\n| `#lt`       | `#less_than`                | `dao.where(:paws).lt(4)`      |\r\n| `#gt`       | `#greater_than`             | `dao.where(:paws).gt(4)`      |\r\n| `#lte`      | `#less_than_or_equal`       | `dao.where(:paws).lte(4)`     |\r\n| `#gte`      | `#greater_than_or_equal`    | `dao.where(:paws).gte(4)`     |\r\n| `#in`       | -                          | `dao.where(:paws).in(4, 3)`   |\r\n| `#nin`      | `#not_in`                   | `dao.where(:paws).gte(4)`     |\r\n| `#all`      | -                          | `dao.where(:likes).all('tuna', 'catnip')`     |\r\n| `#size`      | -                   | `dao.where(:likes).size(3)`     |\r\n| `#exists`      | -                   | `dao.where(:tail).exists`     |\r\n| `#does_not_exist` | `#exists(false)`    | `dao.where(:tail).does_not_exist`     |\r\n\r\n### Logic\r\n\r\nUsing `#not` will negate the following where clause (one only), whatever it might be. So:\r\n\r\n    dao.where(:paws).not.gte(4)\r\n\r\ntranslates as:\r\n\r\n    { 'paws' : { '$not' : { '$gte' : 4 } } }\r\n\r\nThe MongoDB `or` and `nor` operators have different names in Daodalus so that they make more sense in the context they're in. So, to match *any* of a set of clauses, use `#any` like this:\r\n\r\n    dao.where.any(\r\n      dao.where(:paws).eq(3),\r\n      dao.where(:name).eq('Terry')\r\n    )\r\n\r\n    # translates as { '$or' : [ { 'paws' : 3 }, { 'name' : 'Terry' }] }\r\n\r\n...and to match only if *none* of a set of clauses match, use `#none`:\r\n\r\n    dao.where.none(\r\n      dao.where(:paws).eq(3),\r\n      dao.where(:name).eq('Terry')\r\n    )\r\n\r\n    # translates as { '$nor' : [ { 'paws' : 3 }, { 'name' : 'Terry' }] }\r\n\r\n### Matching array elements\r\n\r\nYou can also ensure a specific array element matches a number of conditions using the `#elem_match` method.\r\n\r\n    dao.where(:foods).elem_match(\r\n      dao.where(:type).eq(:wet).and(:name).eq(\"Whiskas\")\r\n    )\r\n\r\n    # translates as { 'foods' : { '$elemMatch' : { 'type' : 'wet', 'name' : 'Whiskas' } } }\r\n\r\nThis will match only documents with a `foods` array which contains an element with a `type` value of \"wet\" *and* a `name` value of \"Whiskas\".\r\n\r\n### The hard way\r\n\r\nIf you want to just pass a hash as a where clause just as you would if you were using the driver directly, you can do that too, like this:\r\n\r\n    dao.where(name: 'Terry', paws: 3)\r\n\r\nThis can be more readable for simple equality matching over a number of fields.\r\n\r\n## Selecting Fields to be Returned (Projection)\r\n\r\nYou don't always want the whole document to be returned. Mongo allows you to specify which fields you're interested in. To do this in Daodalus, use `#select`. Here's how to specify a bunch of fields to be selected:\r\n\r\n    dao.select(:name, :paws, :tail)\r\n\r\nNB. Although MongoDB *always* selects the `_id` field by default, Daodalus does not do this (in order to reduce the number of 'special cases'). If you need the `_id` field, simply specify it as part of the select.\r\n\r\n### Chaining selects\r\n\r\nIf you're selecting lots of fields, you may wish to split the statement over multiple lines - or you could wish to separate groups of selected fields for semantic reasons. To help keep this neat, selects can be chained with the `and` method like this:\r\n\r\n    dao.select(:cats, :dogs, :fish).and(:pigs, :sheep, :horseys)\r\n\r\n### The positional operator\r\n\r\nIn Mongo, if you want to select only the first matched subdocument in an array you use the positional operator (`$`). In Daodalus, we've given that the slightly more descriptive name of `#by_position`. Use it like this:\r\n\r\n    dao.select(:cats).by_position.where(:'cats.paws').gt(3) # select and return only the first cat with > 3 paws\r\n\r\nYou could also have specified the positional operator manually as part of the field name like this:\r\n\r\n    dao.select(:'cats.$').where(:'cats.paws').gt(3)\r\n\r\n### Slice\r\n\r\nTo select a subsection of an array, use `#slice`.\r\n\r\n    dao.select(:favourite_foods).slice(4)      # get the first four\r\n    dao.select(:favourite_foods).slice(-4)     # get the last four\r\n    dao.select(:favourite_foods).slice(10, 4)  # get four, starting with the 10th\r\n    dao.select(:favourite_foods).slice(-10, 4) # get four, starting with the 10th from last\r\n\r\n### Elem_match\r\n\r\nIt's also possible to use `#elem_match` as part of a select clause, in a similar way to how it's used in a where clause. This time, it makes sure that only the first element in an array that matches the provided query is returned.\r\n\r\n    dao.select(:favourite_foods).elem_match(\r\n      dao.where(:price).lte(5_00)\r\n    )\r\n\r\n## Updating\r\n\r\nUpdating can be done using the various update methods listed below, followed by the `update`, `upsert`, or `find_and_modify` methods to end the chain (in the same way that we've used `find` and `find_and_modify` up to now). So you end up with something like this:\r\n\r\n    dao.set(name: 'Poor Terry').dec(:paws).where(:name).eq('Terry').update\r\n    dao.set(name: 'Poor Terry').dec(:paws).where(:name).eq('Terry').upsert\r\n    dao.set(name: 'Poor Terry').where(:name).eq('Terry').find_and_modify\r\n\r\nEach method also accepts an optional hash of options to pass to the respective Mongo driver method. See Mongo docs for details.\r\n\r\nHere's the list of all currently implemented update methods you can use and how to use them:\r\n\r\n| Method   | Usage                         |\r\n| -------- | ----------------------------- |\r\n| `#set`   | `dao.set(paws: 3)`            |\r\n| `#unset`   | `dao.unset(:name, :paws)`   |\r\n| `#inc`   | `dao.inc(:paws, 2) #default is 1`            | \r\n| `#dec`   | `dao.dec(:paws) #default is 1`            | \r\n| `#rename` | `dao.rename(:paws, :feet)` | \r\n| `#pop_first` | `dao.pop_first(:likes)` | \r\n| `#pop_last` | `dao.pop_last(:likes)` | \r\n| `#push` | `dao.push(:likes, 'Marxist political economy')` | \r\n| `#push_all` | `dao.push_all(:likes, ['bananas', 'crisps'])` | \r\n| `#add_to_set` | `dao.add_to_set(:likes, 'bananas')` |\r\n| `#add_each_to_set` | `dao.add_each_to_set(:likes, ['bananas', 'crisps'])` | \r\n| `#pull` | `dao.pull(:likes, 'Marxist political economy')` | \r\n| `#pull_all` | `dao.pull_all(:likes, ['bananas', 'crisps'])` |\r\n\r\nNB. `#push`, `#add_to_set`, and `#pull` can all accept multiple arguments - they will be converted to the appropriate array based `all` or `each` command under the hood. So you can write `dao.push(:likes, 'Marxist political economy', 'cake')` for example.\r\n\r\n## Aggregation Framework\r\n\r\nUsing the aggregation framework involves simply chaining together a series of pipeline operators to build the query you want, finishing the (arbitrarily long) chain with a call to `aggregate`. Let's look at the different pipeline operators in turn.\r\n\r\n### Match\r\n\r\nMatch allows you to query for a subset of documents in exactly the same way as you do with `where` - except as part of the aggregation pipeline. All the same methods are supported. This is what it looks like:\r\n\r\n    dao.match(:paws).gt(3).and(:name).in(\"Jemima\", \"Terry\").aggregate\r\n\r\n    dao.match.any(\r\n      dao.where(:name).eq('Terry'),\r\n      dao.where(likes: 'tuna')\r\n    ).aggregate\r\n\r\nOk, not that exciting yet. But it becomes exciting when you start combining it with the other operators!\r\n\r\n### Group\r\n\r\nThis works very similar to a `GROUP BY` in SQL. As such Daodalus adds an alias for the method `group_by` - which you may find makes your code read a bit nicer. You can group by a single key like this:\r\n\r\n    dao.group_by(:'$name').aggregate\r\n\r\nwhich will give you result documents of the form `{ '_id' : 'whatever the name is' }`. You can also group by multiple keys like this (you need to provide a name, or alias, for each one):\r\n\r\n    dao.group_by(name: '$name', paws: '$paws').aggregate\r\n\r\nwhich will produce result documents of the form `{ '_id' : { 'name' : 'whatever the name is', 'paws' : 'no of paws' } }`.\r\n\r\nThe `$`s are required to indicate that you want the value of the specified field, rather than just the string literal you're passing. For more info see the Mongo docs.\r\n\r\nGroup also allows you to build aggregates of fields in various ways. You must always provide a name/alias for an aggregate field, by following the call to the function with a call to `as`, like this:\r\n\r\n    dao.group_by('$breed').sum(1).as(:total).aggregate\r\n\r\nHere are the aggregate group functions supported by Daodalus:\r\n\r\n| Function      | Alias          | Usage                                                |\r\n| ------------- | -------------- | ---------------------------------------------------- |\r\n| `#sum`        | `#total`       | `dao.group_by('$breed').sum('$paws').as(:total_paws)` | \r\n| `#add_to_set` | `#distinct`    | `dao.group_by(1).distinct('$breeds').as(:breeds)`     | \r\n| `#push`       | `#collect`     | `dao.group_by(1).collect('$names').as(:names)`        |\r\n| `#first`       | -            | `dao.group_by(1).first('$names').as(:name)`        |\r\n| `#last`       | -             | `dao.group_by(1).last('$names').as(:name)`        |\r\n| `#max`       | -              | `dao.group_by(1).max('$paws').as(:max_paws)`        |\r\n| `#min`       | -              | `dao.group_by(1).min('$paws').as(:min_paws)`        |\r\n| `#avg`       | `#average`     | `dao.group_by(1).average('$paws').as(:average_paws)`        |\r\n\r\n### Project\r\n\r\nReturn a subset of fields from an aggregation and perform simple calculations on the returned fields with `#project`.\r\n\r\nTo simply return one or more fields as they are, pass them to `#project` like this:\r\n\r\n    dao.project(:name, :paws, :'food.type').aggregate\r\n    # NB. as with #select, the '_id' field is excluded by default\r\n\r\nTo give aliases to your fields, pass a hash in the structure you want. You'll need to use the `$` operator to signify the fields you want your aliases to refer to.\r\n\r\n    dao.project(cat: \"$name\").aggregate\r\n\r\nAnother way to provide aliases is to use the `as` method like this:\r\n\r\n    dao.project(\"$paws\").as(:feet).aggregate\r\n\r\nYou can chain `project` calls together using `and`, like this:\r\n\r\n    dao.project(:name, :likes).and(feet: \"$paws\").and(\"$foods.name\").as(:foods).aggregate\r\n\r\nYou can build nested documents by using nested projects:\r\n\r\n    dao.project(\r\n      dao.project(:name, :paws)\r\n    ).as(:cat).aggregate\r\n\r\nAnd finally, you can perform simple operations on the data, like this:\r\n\r\n    dao.project(4).minus(\"$paws\").as(:accidents).aggregate\r\n\r\nHere's the list of the currently supported `project` functions:\r\n\r\n| Function      | Alias          | Usage                                                |\r\n| ------------- | -------------- | ---------------------------------------------------- |\r\n| `#eq`        | -               | `dao.project('$breed').eq('Tabby').as(:is_tabby)` | \r\n| `#add`        | `#plus`        | `dao.project('$paws').plus('$lives', 3).as(:a_number)` | \r\n| `#subtract`        | `#minus`        | `dao.project('$paws').minus(1).as(:less_paws)` | \r\n| `#divide`        | `#divided_by`        | `dao.project('$paws').divided_by(2).as(:half_my_paws)` | \r\n| `#multiply`        | `#multiplied_by`        | `dao.project('$paws').multiplied_by(2).as(:double_paws)` | \r\n| `#mod`        | -        | `dao.project('$paws').mod(2).as(:odd_paws)` | \r\n\r\n### Skip and Limit\r\n\r\nSome very simple aggregation functions, analogous to the identically named methods you can use with a normal Mongo cursor. Skip an certain number of documents with `#skip` and limit the number returned with `#limit`.\r\n\r\n    dao.skip(100).limit(20).aggregate\r\n\r\n### Sort\r\n\r\nAgain, analogous to the method on `MongoCursor`. Pass a hash with the fields you want to sort by as keys and either `1` for ascending order or `-1` for descending order. If you like, instead of `1` and `-1` you can also use the symbols `:asc` and `:desc` like this:\r\n\r\n    dao.sort(breed: :asc, paws: :desc).aggregate\r\n\r\n### Unwind\r\n\r\nIf you have an array field and you want to unwind the document into one copy for each array element ('unwinding' them out of the array) use `#unwind`. Using it is simple, just pass it the field name you want to unwind. Remember it has to be an array field!\r\n\r\n    dao.unwind(:likes).aggregate\r\n\r\n## License\r\n\r\nDaodalus is Copyright © 2012-2013 On The Beach Ltd.\r\nIt is free software, and may be redistributed under the terms specified in the LICENSE file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}